// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public Entity characterModel;
            [FieldOffset(4)]
            public System.Int32 Hp;
            [FieldOffset(8)]
            public System.Int32 Atk;
            [FieldOffset(12)]
            public System.Int32 CharIndex;
            [FieldOffset(16)]
            public ByteArray PlayerName;
            [FieldOffset(32)]
            public System.Byte IsDead;
            [FieldOffset(33)]
            public ByteArray characterName;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.characterModelMask;
            characterModelSimulationFrame = frame;
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.HpMask;
            HpSimulationFrame = frame;
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.AtkMask;
            AtkSimulationFrame = frame;
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.CharIndexMask;
            CharIndexSimulationFrame = frame;
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.PlayerNameMask;
            PlayerNameSimulationFrame = frame;
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.IsDeadMask;
            IsDeadSimulationFrame = frame;
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.characterNameMask;
            characterNameSimulationFrame = frame;
        }

        public static unsafe _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 49) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 49) " +
                    "for component with ID 21");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 21");
            }

            var orig = new _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788();

            var comp = (Interop*)data;

            orig.characterModel = comp->characterModel;
            orig.Hp = comp->Hp;
            orig.Atk = comp->Atk;
            orig.CharIndex = comp->CharIndex;
            orig.PlayerName = comp->PlayerName.Data != null ? System.Text.Encoding.UTF8.GetString((byte*)comp->PlayerName.Data, (int)comp->PlayerName.Length) : null;
            orig.IsDead = comp->IsDead != 0;
            orig.characterName = comp->characterName.Data != null ? System.Text.Encoding.UTF8.GetString((byte*)comp->characterName.Data, (int)comp->characterName.Length) : null;

            return orig;
        }


        public static uint characterModelMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame characterModelSimulationFrame;
        public Entity characterModel;
        public static uint HpMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame HpSimulationFrame;
        public System.Int32 Hp;
        public static uint AtkMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame AtkSimulationFrame;
        public System.Int32 Atk;
        public static uint CharIndexMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame CharIndexSimulationFrame;
        public System.Int32 CharIndex;
        public static uint PlayerNameMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame PlayerNameSimulationFrame;
        public System.String PlayerName;
        public static uint IsDeadMask => 0b00000000000000000000000000100000;
        public AbsoluteSimulationFrame IsDeadSimulationFrame;
        public System.Boolean IsDead;
        public static uint characterNameMask => 0b00000000000000000000000001000000;
        public AbsoluteSimulationFrame characterNameSimulationFrame;
        public System.String characterName;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 21;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000001111111;
        public bool HasFields() => true;
        public bool HasRefFields() => true;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 7;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return new HashSet<Entity>()
            {
                this.characterModel,
            };
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            uint refsMask = 0;

            if (this.characterModel == fromEntity)
            {
                this.characterModel = toEntity;
                refsMask |= 1 << 0;
            }

            FieldsMask |= refsMask;

            return refsMask;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            Entity absoluteEntity;
            IEntityMapper.Error err;
            err = mapper.MapToAbsoluteEntity(this.characterModel, false, out absoluteEntity);

            if (err != IEntityMapper.Error.None)
            {
                return err;
            }

            this.characterModel = absoluteEntity;
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            Entity relativeEntity;
            IEntityMapper.Error err;
            // We assume that the inConnection held changes with unresolved references, so the 'createMapping=true' is
            // there only because there's a chance that the parent creation change will be processed after this one
            // meaning there's no mapping for the parent yet. This wouldn't be necessary if mapping creation would happen
            // in the clientWorld via create/destroy requests while here we would only check whether mapping exists or not.
            var createParentMapping_characterModel = true;
            err = mapper.MapToRelativeEntity(this.characterModel, createParentMapping_characterModel,
             out relativeEntity);

            if (err != IEntityMapper.Error.None)
            {
                return err;
            }

            this.characterModel = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly System.Int32 _Hp_Min = -2147483648;
        private static readonly System.Int32 _Hp_Max = 2147483647;
        private static readonly System.Int32 _Atk_Min = -2147483648;
        private static readonly System.Int32 _Atk_Max = 2147483647;
        private static readonly System.Int32 _CharIndex_Min = -2147483648;
        private static readonly System.Int32 _CharIndex_Max = 2147483647;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.characterModelSimulationFrame = other.characterModelSimulationFrame;
                this.characterModel = other.characterModel;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.HpSimulationFrame = other.HpSimulationFrame;
                this.Hp = other.Hp;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.AtkSimulationFrame = other.AtkSimulationFrame;
                this.Atk = other.Atk;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.CharIndexSimulationFrame = other.CharIndexSimulationFrame;
                this.CharIndex = other.CharIndex;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.PlayerNameSimulationFrame = other.PlayerNameSimulationFrame;
                this.PlayerName = other.PlayerName;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.IsDeadSimulationFrame = other.IsDeadSimulationFrame;
                this.IsDead = other.IsDead;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.characterNameSimulationFrame = other.characterNameSimulationFrame;
                this.characterName = other.characterName;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 7);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.characterModel;
                bitStream.WriteEntity(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.Hp, _Hp_Min, _Hp_Max, "_5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.Hp", logger);
                data.Hp = Coherence.Utils.Bounds.Clamp(data.Hp, _Hp_Min, _Hp_Max);
                var fieldValue = data.Hp;
                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.Atk, _Atk_Min, _Atk_Max, "_5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.Atk", logger);
                data.Atk = Coherence.Utils.Bounds.Clamp(data.Atk, _Atk_Min, _Atk_Max);
                var fieldValue = data.Atk;
                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.CharIndex, _CharIndex_Min, _CharIndex_Max, "_5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.CharIndex", logger);
                data.CharIndex = Coherence.Utils.Bounds.Clamp(data.CharIndex, _CharIndex_Min, _CharIndex_Max);
                var fieldValue = data.CharIndex;
                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.PlayerName;
                bitStream.WriteShortString(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.IsDead;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.characterName;
                bitStream.WriteShortString(fieldValue);
            }
            mask >>= 1;

            return mask;
        }

        public static _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(7);
            }

            var val = new _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788();
            if (bitStream.ReadMask())
            {

                val.characterModel = bitStream.ReadEntity();
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.characterModelMask;
            }
            if (bitStream.ReadMask())
            {

                val.Hp = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.HpMask;
            }
            if (bitStream.ReadMask())
            {

                val.Atk = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.AtkMask;
            }
            if (bitStream.ReadMask())
            {

                val.CharIndex = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.CharIndexMask;
            }
            if (bitStream.ReadMask())
            {

                val.PlayerName = bitStream.ReadShortString();
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.PlayerNameMask;
            }
            if (bitStream.ReadMask())
            {

                val.IsDead = bitStream.ReadBool();
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.IsDeadMask;
            }
            if (bitStream.ReadMask())
            {

                val.characterName = bitStream.ReadShortString();
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788.characterNameMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_5e0c0b0b1e0d32b40bf8ad9c0e90a191_3447004284609024788(" +
                $" characterModel: { this.characterModel }" +
                $" Hp: { this.Hp }" +
                $" Atk: { this.Atk }" +
                $" CharIndex: { this.CharIndex }" +
                $" PlayerName: { this.PlayerName }" +
                $" IsDead: { this.IsDead }" +
                $" characterName: { this.characterName }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(7, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(7, '0') })";
        }
    }

}
