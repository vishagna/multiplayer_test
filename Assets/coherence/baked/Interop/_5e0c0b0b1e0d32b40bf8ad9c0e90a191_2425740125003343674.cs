// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Byte IsWave;
            [FieldOffset(1)]
            public System.Byte IsRun;
            [FieldOffset(2)]
            public System.Byte IsWalk;
            [FieldOffset(3)]
            public System.Byte IsIdle;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674.IsWaveMask;
            IsWaveSimulationFrame = frame;
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674.IsRunMask;
            IsRunSimulationFrame = frame;
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674.IsWalkMask;
            IsWalkSimulationFrame = frame;
            FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674.IsIdleMask;
            IsIdleSimulationFrame = frame;
        }

        public static unsafe _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 4) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 4) " +
                    "for component with ID 19");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 19");
            }

            var orig = new _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674();

            var comp = (Interop*)data;

            orig.IsWave = comp->IsWave != 0;
            orig.IsRun = comp->IsRun != 0;
            orig.IsWalk = comp->IsWalk != 0;
            orig.IsIdle = comp->IsIdle != 0;

            return orig;
        }


        public static uint IsWaveMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame IsWaveSimulationFrame;
        public System.Boolean IsWave;
        public static uint IsRunMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame IsRunSimulationFrame;
        public System.Boolean IsRun;
        public static uint IsWalkMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame IsWalkSimulationFrame;
        public System.Boolean IsWalk;
        public static uint IsIdleMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame IsIdleSimulationFrame;
        public System.Boolean IsIdle;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 19;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000001111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 4;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;


        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.IsWaveSimulationFrame = other.IsWaveSimulationFrame;
                this.IsWave = other.IsWave;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.IsRunSimulationFrame = other.IsRunSimulationFrame;
                this.IsRun = other.IsRun;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.IsWalkSimulationFrame = other.IsWalkSimulationFrame;
                this.IsWalk = other.IsWalk;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.IsIdleSimulationFrame = other.IsIdleSimulationFrame;
                this.IsIdle = other.IsIdle;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 4);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.IsWave;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.IsRun;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.IsWalk;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.IsIdle;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;

            return mask;
        }

        public static _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(4);
            }

            var val = new _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674();
            if (bitStream.ReadMask())
            {

                val.IsWave = bitStream.ReadBool();
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674.IsWaveMask;
            }
            if (bitStream.ReadMask())
            {

                val.IsRun = bitStream.ReadBool();
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674.IsRunMask;
            }
            if (bitStream.ReadMask())
            {

                val.IsWalk = bitStream.ReadBool();
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674.IsWalkMask;
            }
            if (bitStream.ReadMask())
            {

                val.IsIdle = bitStream.ReadBool();
                val.FieldsMask |= _5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674.IsIdleMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_5e0c0b0b1e0d32b40bf8ad9c0e90a191_2425740125003343674(" +
                $" IsWave: { this.IsWave }" +
                $" IsRun: { this.IsRun }" +
                $" IsWalk: { this.IsWalk }" +
                $" IsIdle: { this.IsIdle }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(4, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(4, '0') })";
        }
    }

}
